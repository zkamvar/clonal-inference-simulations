simulations and LD
========================================================
author: Zhian N. Kamvar
date: 2013-09-19
font-family: "Helvetica"
```{r setup, include=FALSE}
opts_chunk$set(cache=TRUE)
opts_chunk$set(message=FALSE)
```

Simulation Parameters via Simupop v.1.0.8
========================================================


- Rates of sexual reproduction: **10**
- Number of Loci: **10**
- Alleles per Locus: **6 to 10**
- Populations per sex rate: **100**
- Mutation Rate: **$1 \times 10^{-5}$**

***

- Sample sizes: **100, 50, 25, 10**
- Samples per population: **40**
- Generations/individuals: **10,000**
- Total number of data sets: **40,000**


Index of Association Behavior
========================================================
```{r setup2, include=FALSE}
opts_chunk$set(cache=TRUE)
opts_chunk$set(message=FALSE)
```


```{r, echo = FALSE, keep.source=TRUE}
library(poppr)
library(ggplot2)
path <- "/home/local/USDA-ARS/kamvarz/Documents/bitbucket_repos/simulations/analysis"
x <- list.files(path, pattern="^final.+?csv$")
x <- list(files = x, path = path)
setwd(x$path)
an <- lapply(x$files, read.table, header=TRUE)

#==============================================================================#
# Edit this for the number of methods you use.
#
methan <- lapply(1:4, function(y) cbind(an[[y]], list(Method=rep(y, 40000))))
meth <- rbind(methan[[1]], methan[[2]], methan[[3]], methan[[4]])
#
# Got it?
#==============================================================================#

meth$Sex.Rate <- round(meth$Sex.Rate, 5)
meth$Sex.Rate <- factor(meth$Sex.Rate)
meth$Method <- factor(meth$Method)
meth$Samp.Size <- factor(paste("n =",meth$Samp.Size))
meth$Samp.Size <- factor(meth$Samp.Size, levels(meth$Samp.Size)[c(1,3:4,2)])

#==============================================================================#
# Hey, this is where you should make sure that you have the correct methods.
#
methlev <- c("Original (multilocus)", "Permutataion", "Parametric Bootstrap", "Non-Parametric Bootstrap")
samlev <- levels(meth$Samp.Size)
sexlev <- levels(meth$Sex.Rate)
#
#
#==============================================================================#

levels(meth$Method) <- methlev
IndexNames <- c("I[A]", "I[A] p-value", "Resampled I[A] min", "Resampled Ia max", "Resampled Ia median", "Resampled Ia mean", "Resampled Ia variance", 
                "Resampled Ia standard deviation", "rbarD", "rbarD p-value", "Resampled rbarD min", "Resampled rbarD max", "Resampled rbarD median", "Resampled rbarD mean", 
                "Resampled rbarD variance", "Resampled rbarD standard deviation")
names(IndexNames) <- names(meth)[10:25]

themes <-  theme_bw() + 
  theme(legend.position = "bottom", 
        axis.text.x = element_text(angle = 45, hjust=1, vjust=1, family = "Helvetica"), 
        axis.text.y = element_text(family = "Helvetica"),
        axis.title = element_text(size = rel(2)),
        panel.grid.major.x = element_blank(), 
        strip.background = element_rect(color = "black", fill = "white"), 
        strip.text = element_text(face = "bold", family = "Helvetica"), 
        plot.title = element_text(face = "bold", size = rel(2), vjust = 1, 
                                  family = "Helvetica"))

theme2 <- theme_bw() + 
  theme(legend.position = c(1, 1), 
        legend.justification = c(1, 1), 
        legend.title = element_text(size = rel(1), family = "Helvetica"),
        axis.text.x = element_text(angle = 45, hjust=1, vjust=1, family = "Helvetica"), 
        axis.text.y = element_text(family = "Helvetica"), 
        axis.title.y = element_text(angle = 0, face = "bold", size = rel(2)), 
        axis.title.x = element_text(angle = 0, face = "bold", size = rel(2)),
        panel.grid.major.x = element_blank(), 
        plot.title = element_text(face = "bold", size = rel(2), vjust = 1, 
                                  family = "Helvetica")
        )

theme3 <- theme_bw() + 
  theme(#legend.position = c(0, 1), 
        #legend.justification = c(0, 1), 
        legend.position = "top",
        legend.title = element_text(size = rel(1), family = "Helvetica"),
        axis.text.x = element_text(angle = 45, hjust=1, vjust=1, family = "Helvetica"), 
        axis.text.y = element_text(family = "Helvetica"), 
        axis.title.y = element_text(angle = 90, face = "bold", size = rel(2)), 
        axis.title.x = element_text(angle = 0, face = "bold", size = rel(2)),
        panel.grid.major.x = element_blank(), 
        plot.title = element_text(face = "bold", size = rel(2), vjust = 1, 
                                  family = "Helvetica")
  )

meth2 <- meth[-which(is.na(meth$rbarD)), ]

Iagrey <- ggplot(meth2, aes_string(x = "Sex.Rate", y = "Ia", fill = "Samp.Size")) + geom_boxplot(outlier.shape = 20, outlier.size = 1, notch = TRUE) + theme_bw() + labs(y = expression(I[A])) + xlab("Sex Rate") + theme2 + labs(fill = "Sample Size") + scale_fill_grey(start = 0.4, end = 1) #+ labs(title = expression(paste(I[A], " over 1000 data sets")), size = rel(2), face = "bold") 

rbarDgrey <- ggplot(meth2, aes_string(x = "Sex.Rate", y = "rbarD", fill = "Samp.Size")) + geom_boxplot(outlier.shape = 20, outlier.size = 1, notch = TRUE) + labs(y = expression(bar(r)[d])) + xlab("Sex Rate") + theme2 + labs(fill = "Sample Size") + scale_fill_grey(start = 0.4, end = 1) #+ labs(title = expression(paste(bar(r)[d], " over 1000 data sets")), size = rel(2), face = "bold") 

Iapvalgrey <- ggplot(meth2[meth2$Method == levels(meth2$Method)[2], ], aes_string(x = "Sex.Rate", y = "p.Ia", fill = "Samp.Size")) + geom_boxplot(outlier.shape = 20, outlier.size = 1) + labs(y = expression(paste(I[A], " p-value (log scale)"))) + xlab("Sex Rate") + theme3 + labs(fill = "Sample Size") + scale_fill_grey(start = 0.4, end = 1) + coord_trans(y = "log2") + geom_hline(aes(yintercept = 0.05), linetype = 2) + annotate("text", x = 0, y = 0.04, label = "p = 0.05")

rbarDpvalgrey <- ggplot(meth2[meth2$Method == levels(meth2$Method)[2], ], aes_string(x = "Sex.Rate", y = "p.rD", fill = "Samp.Size")) + geom_boxplot(outlier.shape = 20, outlier.size = 1) + labs(y = expression(paste(bar(r)[d], " p-value (log scale)"))) + xlab("Sex Rate") + theme3 + labs(fill = "Sample Size") + scale_fill_grey(start = 0.4, end = 1) + coord_trans(y = "log2") + geom_hline(aes(yintercept = 0.05), linetype = 2) + annotate("text", x = 0, y = 0.04, label = "p = 0.05")

E5grey <- ggplot(meth2, aes_string(x = "Sex.Rate", y = "E.5", fill = "Samp.Size")) + geom_boxplot(outlier.shape = 20, outlier.size = 1, notch = TRUE) + theme_bw() + labs(y = expression(E[5])) + xlab("Sex Rate") + theme2 + labs(fill = "Sample Size") + scale_fill_grey(start = 0.4, end = 1) #+ labs(title = expression(paste(E[5], " over 1000 data sets")), size = rel(2), face = "bold") 

Hexpgrey <- ggplot(meth2, aes_string(x = "Sex.Rate", y = "Hexp", fill = "Samp.Size")) + geom_boxplot(outlier.shape = 20, outlier.size = 1, notch = TRUE) + theme_bw() + labs(y = "Expected Heterozygosity") + xlab("Sex Rate") + theme3 + labs(fill = "Sample Size") + scale_fill_grey(start = 0.4, end = 1) #+ labs(title = expression(paste(E[5], " over 1000 data sets")), size = rel(2), face = "bold") 

Hgrey <- ggplot(meth2, aes_string(x = "Sex.Rate", y = "H", fill = "Samp.Size")) + geom_boxplot(outlier.shape = 20, outlier.size = 1, notch = TRUE) + theme_bw() + labs(y = "Shannon-Wiener Index") + xlab("Sex Rate") + theme3 + labs(fill = "Sample Size") + scale_fill_grey(start = 0.4, end = 1) #+ labs(title = expression(paste(E[5], " over 1000 data sets")), size = rel(2), face = "bold") 

Ggrey <- ggplot(meth2, aes_string(x = "Sex.Rate", y = "G", fill = "Samp.Size")) + geom_boxplot(outlier.shape = 20, outlier.size = 1, notch = TRUE) + theme_bw() + labs(y = "Stoddart and Taylor's Index") + xlab("Sex Rate") + theme3 + labs(fill = "Sample Size") + scale_fill_grey(start = 0.4, end = 1) #+ labs(title = expression(paste(E[5], " over 1000 data sets")), size = rel(2), face = "bold") 

Mgrey <- ggplot(meth2, aes_string(x = "Sex.Rate", y = "MLG", fill = "Samp.Size")) + geom_boxplot(outlier.shape = 20, outlier.size = 1, notch = TRUE) + theme_bw() + labs(y = "Multilocus genotypes") + xlab("Sex Rate") + theme3 + labs(fill = "Sample Size") + scale_fill_grey(start = 0.4, end = 1)
```
```{r, echo = FALSE, keep.source=TRUE}
print(Iagrey)
```

***

```{r, echo = FALSE, keep.source=TRUE}
print(rbarDgrey)
```

P values
========================================================

```{r, echo=FALSE}
print(Iapvalgrey)
```

***

```{r, echo=FALSE}
print(rbarDpvalgrey)
```


Evenness and Nei 1978 Genotypic Div.
========================================================

```{r, echo=FALSE}
print(E5grey)
```

***

```{r, echo=FALSE}
print(Hexpgrey)
```


G and MLG
========================================================

```{r, echo=FALSE}
print(Ggrey)
```

***

```{r, echo=FALSE}
print(Mgrey)
```

All Ia values
========================================================

```{r, echo=FALSE}
library(reshape)
sim <- read.table("~/Documents/bitbucket_repos/all_finals.csv", header = TRUE, sep = " ")
sim$Generation <- as.numeric(vapply(strsplit(as.character(sim$File), "_"), function(x) strsplit(x[10], "\\.")[[1]][1], "butt"))
sim$Sex.Rate <- round(sim$Sex.Rate, 5)
sim$Sex.Rate <- factor(sim$Sex.Rate)
sim$Samp.Size <- factor(paste("n =",sim$Samp.Size))
sim$Samp.Size <- factor(sim$Samp.Size, levels(sim$Samp.Size)[c(1,3:4,2)])
simnarm <- sim[-which(is.na(sim$rbarD)), ]
themes <-  theme_bw() + 
  theme(legend.position = "bottom", 
        axis.text.x = element_text(angle = 45, hjust=1, vjust=1, family = "Helvetica"), 
        axis.text.y = element_text(family = "Helvetica"),
        axis.title = element_text(size = rel(2)),
        panel.grid.major.x = element_blank(), 
        strip.background = element_rect(color = "black", fill = "white"), 
        strip.text = element_text(face = "bold", family = "Helvetica"), 
        plot.title = element_text(face = "bold", size = rel(2), vjust = 1, 
                                  family = "Helvetica"))

theme2 <- theme_bw() + 
  theme(legend.position = c(1, 0), 
        legend.justification = c(1, 0), 
        legend.direction = "horizontal",
        legend.title = element_text(size = rel(1), family = "Helvetica"),
        axis.text.x = element_text(angle = 45, hjust=1, vjust=1, family = "Helvetica"), 
        axis.text.y = element_text(family = "Helvetica"), 
        axis.title.y = element_text(angle = 0, face = "bold", size = rel(2)), 
        axis.title.x = element_text(angle = 0, face = "bold", size = rel(2)),
        panel.grid.major.x = element_blank(), 
        plot.title = element_text(face = "bold", size = rel(2), vjust = 1, 
                                  family = "Helvetica")
  )

theme3 <- theme_bw() + 
  theme(#legend.position = c(0, 1), 
    #legend.justification = c(0, 1), 
    legend.position = "top",
    legend.title = element_text(size = rel(1), family = "Helvetica"),
    axis.text.x = element_text(angle = 45, hjust=1, vjust=1, family = "Helvetica"), 
    axis.text.y = element_text(family = "Helvetica"), 
    axis.title.y = element_text(angle = 90, face = "bold", size = rel(2)), 
    axis.title.x = element_text(angle = 0, face = "bold", size = rel(2)),
    panel.grid.major.x = element_blank(), 
    plot.title = element_text(face = "bold", size = rel(2), vjust = 1, 
                              family = "Helvetica")
  )
Ialab <- labs(list(y = expression(I[A]), x = "Generation (x1000)", fill = "Sample Size"))
rbarDlab <- labs(list(y = expression(bar(r)[d]), x = "Generation (x1000)", fill = "Sample Size"))
Ia.bar <- ggplot(simnarm) + geom_boxplot(aes(x = factor(Generation), y = Ia, fill = Samp.Size), outlier.shape = 20, outlier.size = 1, notch = TRUE) + facet_wrap(~Sex.Rate) + theme_bw() + scale_fill_grey(start = 0.4, end = 1)
rbarD.bar <- ggplot(simnarm) + geom_boxplot(aes(x = factor(Generation), y = rbarD, fill = Samp.Size), outlier.shape = 20, outlier.size = 1, notch = TRUE) + facet_wrap(~Sex.Rate) + theme_bw() + scale_fill_grey(start = 0.4, end = 1)
All.Ia <- Ia.bar + Ialab + theme3
All.rbarD <- rbarD.bar + rbarDlab + theme3

#Ia.point <- ggplot(simnarm, aes(x = factor(Generation), y = Ia, color = Samp.Size, group = Samp.Size, alpha = 0.0001)) + geom_point(position = "jitter") + stat_smooth(alpha = 1) + facet_wrap(~Sex.Rate, scales = "free_y") + theme_bw()
#rbarD.point <- ggplot(simnarm, aes(x = factor(Generation), y = rbarD, color = Samp.Size, group = Samp.Size, alpha = 0.5)) + geom_point(position = "jitter") + stat_smooth() + facet_grid(Sex.Rate ~ Samp.Size) + theme_bw()

# Missing stats:

Samp.Sex <- table(sim[is.na(sim$rbarD) & sim$Generation == 10, c("Sex.Rate", "Samp.Size")])
MLG.Sex <- table(sim[is.na(sim$rbarD) & sim$Generation == 10, c("Sex.Rate", "MLG")])
Samp.Sex.df <- data.frame(t(Samp.Sex[1:2, ]))
names(Samp.Sex.df) <- c(0, 1e-04)
Samp.Sex.df$Samp.Size <- factor(rownames(Samp.Sex.df), levels = rownames(Samp.Sex.df))
Missing1 <- ggplot(melt(Samp.Sex.df)) + 
  geom_bar(aes(x = Samp.Size, y = value, group = variable, fill = variable), stat = "identity", position = "dodge") +
  labs(list(x = "Sample Size", y = "Number of Missing Values", fill = "Sex Rate")) +
  theme3 + scale_fill_grey(start = 0, end = 0.5)

MLG.Sex.df <- data.frame(t(MLG.Sex[1:2, ]))
names(MLG.Sex.df) <- c(0, 1e-04)
MLG.Sex.df$MLG <- factor(rownames(MLG.Sex.df), levels = rownames(MLG.Sex.df))
Missing2 <- ggplot(melt(MLG.Sex.df)) + 
  geom_bar(aes(x = MLG, y = value, group = variable, fill = variable), stat = "identity", position = "dodge") +
  labs(list(x = "Number of MLGs", y = "Number of Missing Values", fill = "Sex Rate")) +
  theme3 + scale_fill_grey(start = 0, end = 0.5)

MLG.Sex.Samp <- table(sim[is.na(sim$rbarD) & sim$Generation == 10, c("MLG", "Samp.Size", "Sex.Rate")])[, , 1:2]
MLG.Sex.Samp.df <- melt(MLG.Sex.Samp)
MLG.Sex.Samp.df$Samp.Size <- factor(MLG.Sex.Samp.df$Samp.Size, levels = unique(MLG.Sex.Samp.df$Samp.Size))
MLG.Sex.Samp.df$Sex.Rate <- paste("Sex Rate:", MLG.Sex.Samp.df$Sex.Rate)

missing_lab <- labs(list(x = "Number of MLGs", y = "Number of missing values", fill = "Sample Size"))
Missing3 <- ggplot(MLG.Sex.Samp.df) + geom_bar(aes(x = factor(MLG), y = value, fill = Samp.Size), stat = "identity", position = "stack") + theme_bw() + facet_wrap(~Sex.Rate, ncol = 1) + theme3 + theme(legend.position = c(0.5, 0.5), legend.justification = c(0.5, 1), legend.direction = "horizontal", legend.title.align = 0.5) + scale_fill_grey(start = 0.2, end = 0.8) + missing_lab

```

```{r, echo=FALSE, width=20}
print(All.Ia)
```

All rbarD
========================================================

```{r, echo=FALSE, width = 20}
print(All.rbarD)
```

Missing values
========================================================

```{r, echo=FALSE}
print(Missing1)
```

***

```{r, echo=FALSE}
print(Missing2)
```
